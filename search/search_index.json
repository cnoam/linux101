{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Linux: a self paced course for complete beginners","text":"<p>TODO:</p> <ul> <li>spell check</li> <li>add Hebrew/Arabic support via mkdocs </li> </ul> <p>\u05de\u05de\u05e9 \u05de\u05de\u05e9 \u05de\u05d9\u05dc\u05d5\u05ea \u05e4\u05ea\u05d9\u05d7\u05d4:</p> <ul> <li>\u05dc\u05de\u05d4 \u05dc\u05d9 \u05dc\u05dc\u05de\u05d5\u05d3 \u05dc\u05d9\u05e0\u05d5\u05e7\u05e1?</li> <li>\u05d0\u05d9\u05e4\u05d4 \u05de\u05e9\u05ea\u05de\u05e9\u05d9\u05dd \u05d1\u05d6\u05d4?</li> <li>\u05de\u05d4 \u05d0\u05ea\u05d4 \u05d4\u05d5\u05dc\u05da \u05dc\u05dc\u05de\u05d3 \u05db\u05d0\u05df \u05d5\u05db\u05de\u05d4 \u05d6\u05de\u05df \u05d6\u05d4 \u05e0\u05de\u05e9\u05da?</li> </ul>"},{"location":"#_1","title":"\u05dc\u05de\u05d9 \u05e9\u05e7\u05d5\u05e8\u05d0 \u05d0\u05ea \u05d4\u05d8\u05d9\u05d5\u05d8\u05d4","text":"<ul> <li>missing contents</li> <li>too much contents</li> <li>contents to remove</li> <li>mistakes</li> <li>your time estimatation</li> </ul>"},{"location":"#emoji-conventions","title":"Emoji conventions","text":"<p>\ud83c\udfa5  a video to watch \ud83d\udcbb  exercise to run on computer \u2705  Check yourself \u26a0\ufe0f  Warning. You can cause damage \u2139\ufe0f  More info here</p> <p>This short course should take you 8..12 hours of watching short videos, reading and mainly trying things on your computer.</p> <p>It is planned for students who uses Windows (or Mac) and have never used linux, especially never used the command line.</p> <p>At the end of this course, you will be able to connect to a linux computer, and run basic commands on it. Most important: The FEAR will be gone!</p> <p>In chapter 1, you will see an overview of Linux. When completing it, you will have a running Linux machine.</p> <p>Chapter 1 Introduction to linux and WSL virtual machines</p> <p>Chapter 2 Navigating the Linux File System Demistfying the terminal</p> <p>Chapter 3 Working with Files and Directories</p> <p>Chapter NN Redirection and pipeline</p> <p>Chapter 4 File Permissions and Ownership</p> <p>Chapter 5 Basic Linux Commands </p> <p>Chapter 6 Text Processing &amp; Editing</p> <p>Chapter 7 Advanced Text Processing Tools</p> <p>Chapter 8 Users, Groups &amp; Permissions </p> <p>Chapter 9 Package Management</p> <p>Chapter 10 Networking &amp; Remote Access</p> <p>Chapter 11 Shell Scripting</p> <p>Regular Expressions are used a lot in shell commands. Learn it!</p>"},{"location":"01/ch_01/","title":"Chapter 01 - Introduction to linux and WSL","text":"<p>In this chapter we will:</p> <ul> <li>see what is an operating system (OS)</li> <li>the history of linux</li> <li>How linux starts running (from power-on to running)</li> </ul>"},{"location":"01/ch_01/#using-a-virtual-machine-dont-skip-it","title":"Using a virtual machine (don't skip it!)","text":"<p>During the course, we will run and sometime break things. To run easily, we use a magical invention: A virtual computer (which is actually just a program running in your real computer) that runs the linux OS. This allows for running linux inside Windows, and when breaking things, we can go back to a safe state. Read this and come back here.</p>"},{"location":"01/ch_01/#from-power-on-to-running-linux","title":"From power-on to running linux","text":""},{"location":"01/ch_01/#prerequisite-installing-linux-alpine-in-vm-lesson","title":"Prerequisite: \"Installing linux alpine in VM\" lesson","text":"<p>Watch the \ud83c\udfa5 video in Panopto (accessible only to Technion accounts) and try to replicate it with your VirtualBox virtual computer.</p> <p>Let's look at this flow:</p> <p></p>"},{"location":"01/ch_01/#to-summarize","title":"To summarize:","text":"<ol> <li>The hardware starts running code in the BIOS.</li> <li>The BIOS program looks for hardware. This can change from boot (i.e. power on) to the next boot.</li> <li>User gets an option to choose where to boot from. This means that there may be a few storage devices (e.g. hard drive and USB drive), and each can have a different operating system on it.</li> <li>Most of the time this stage is hidden -- loading the program called \"boot loader\". [The whole boot process is a long chain of small programs running in a line.]</li> <li>At last the linux starts running. First the Kernel is loaded. It starts many services (in the video, these are the lines with the green '*').</li> <li>Once the kernel is ready, it starts the parent process of all linux user code. This process is called \"init\" sometime and always has process ID 1.</li> <li>The init process runs what is it in it's configuration files. In our case, it opens a terminal, and ask to login. In other cases, it can run without user interface at all (your washing machine) or with Graphical UI (e.g. ubuntu desktop)</li> </ol>"},{"location":"01/ch_01/#check-yourself","title":"Check yourself","text":"<ol> <li>Look at the prints during the boot of Alpine. Can some of the servies be removed (i.e. not started) if we use this instlation without internet. Just look for the names in the internet. No need to actualy modify the boot process.</li> <li>advanced! : Find where alpine stores its kernel loading configuration, and try to remove parts. Your goal is to reduce the boot time to minimum.</li> </ol> <p>TIP: At some point, you will ruin the config file and the Alpine will get stuck during boot. Instead of trying to fix it (you don't have access to the files \ud83d\ude04), Use the virtualBox snapshot feature before you start breaking the OS.</p>"},{"location":"01/ch_01/#what-is-linux","title":"What is Linux?","text":"<p>Definition and Origins   At first there where Unix OS, developed by large companies, and costing a lot of money. In 1991, Linus Torvalds started a small project: re-write Unix as a free software. Its initial purpose was as a free and open alternative to proprietary Unix.</p> <p>Linux OS is both the kernel and a set of user space programs. We will explain these terms later.</p> <p>As Linux matured in the 1990s and 2000s, major distributions began to emerge, each with its own focus and community. Debian emphasized stability and open-source purity, serving as the base for many others. Red Hat targeted enterprise environments with professional support and tools. Later, Ubuntu built on Debian to create a more user-friendly experience, bringing Linux to desktops and simplifying server deployment. </p> <p>These distributions helped standardize Linux usage, grow its adoption, and shape the diverse ecosystem we see today.</p> <ul> <li>Impact on Technology</li> <li>Influence on server infrastructure, cloud computing, and development environments.</li> <li>linux is everywhere (excpept for your desktop \ud83d\ude04): powering the internet, IoT devices, supercomputers, android phones.</li> </ul>"},{"location":"01/ch_01/#linux-vs-windows-key-differences","title":"Linux vs. Windows: Key Differences","text":""},{"location":"01/ch_01/#core-philosophy-and-design","title":"Core Philosophy and Design","text":"<ul> <li>Linux: Open-source, community-driven, customizable.</li> <li>Windows: Proprietary, commercial focus, user-friendly interface.</li> </ul>"},{"location":"01/ch_01/#user-interface-and-experience","title":"User Interface and Experience","text":"<ul> <li>Graphical User Interface (GUI) differences: flexibility in Linux desktop environments vs. a more uniform Windows experience.   There are dozens of linux variants (called \"distributions\" and in short \"disto\"). Anyone can create a new distro. This is both good and bad, since a customer has more choice, but it is confusing to have so many and a lot of development effort is duplicated.</li> <li>Command-line interfaces: The Linux terminal is a powerful tool. It is (almost) the same across all distros, and more importantly, it almost does not change for decades. What worked in 2005 will work now.    In Windows CMD/PowerShell, you CAN perform some of the tasks, but the focus is on GUI. As you know, GUI changes every year, so instructions become obsolete very quickly.</li> </ul>"},{"location":"01/ch_01/#software-and-package-management","title":"Software and Package Management","text":"<p>A package manager:</p> <ul> <li>Downloads software from trusted sources (called repositories)</li> <li>Installs it along with any dependencies it needs</li> <li>Lets you update the software easily</li> <li> <p>Allows safe uninstalling</p> </li> <li> <p>Linux distributions:      Each distro has its own  package managers (APT, YUM, Pacman)</p> </li> <li>Windows:</li> <li>MSI installer - Any hacker can create an installer. Nobody checks it.</li> <li>MS Window Store is a package manager, but failed to gain traction. It improved in Win11, but still most developers do not offer their product there, and so users download from other sources.</li> </ul>"},{"location":"01/ch_01/#customization","title":"Customization","text":"<p>Linux allows for modular configurations compared to Windows\u2019 integrated ecosystem.    In Linux, you can take what the distro developer packed, but you can also configure and fine tune which components to throw away, and what paramets to set (e.g. tuning network parameters)</p> <p>In Windows, An IT manager can tune some limited parts of the OS, but the configuration is more rigid.</p>"},{"location":"01/ch_01/#use-cases-and-industry-adoption","title":"Use Cases and Industry Adoption**","text":"<p>linux wins in  Servers, development environments, embedded systems   Windows wins in desktop and enterprise use.</p> <p>Cost and licensing models: linux is free and community supported; Windows use commercial licensing and subscription models.</p> <p>PS: \"linux is free\" means you don't pay for the OS. But you may have to pay for consulting, IT personel etc. just as for Windows, and sometime even more.</p>"},{"location":"01/ch_01/#finaly-what-is-wsl","title":"Finaly - What is WSL?","text":"<p>WSL2 (Windows Subsystem for Linux 2) is a feature in Windows that lets you run a full Linux environment directly inside Windows \u2014 no virtual machine setup, no dual-booting. </p> <p>WSL2 runs a real Linux kernel in a lightweight virtual machine (VM) using Microsoft\u2019s Hyper-V technology. This means better compatibility with Linux software, improved performance (especially for things like Docker), and support for more complex tasks.</p> <p>WSL2 integrates tightly with Windows. You can access your Windows files from inside Linux (/mnt/c/Users/...), and you can even run Linux commands from the Windows command prompt or PowerShell (and vice versa).</p> <p>For developers who need Linux but don\u2019t want to leave Windows \u2014 or who work across both ecosystems \u2014 WSL2 offers the best of both worlds. It\u2019s fast, free, and doesn\u2019t require full-blown virtualization software like VirtualBox or VMware. That said, it's not a full desktop Linux \u2014 it runs headless, command-line only (though you can install a GUI if needed).</p>"},{"location":"01/virtual_machines/","title":"Virtual machines","text":"<p>\u05db\u05d3\u05d9 \u05dc\u05d4\u05d1\u05d9\u05df \u05de\u05d4 \u05d6\u05d4 \u05dc\u05d9\u05e0\u05d5\u05e7\u05e1[ \u05d5\u05de\u05d4 \u05d4\u05d4\u05d1\u05d3\u05dc \u05d1\u05d9\u05e0\u05d5 \u05dcwindows]  \u05e0\u05e1\u05ea\u05db\u05dc \u05e7\u05d5\u05d3\u05dd \u05de\u05d4\u05d9 \u05de\u05e2\u05e8\u05db\u05ea \u05d4\u05e4\u05e2\u05dc\u05d4.</p>"},{"location":"01/virtual_machines/#_1","title":"\u05de\u05d4\u05d9 \u05de\u05e2\u05e8\u05db\u05ea \u05d4\u05e4\u05e2\u05dc\u05d4?","text":"<p>\u05de\u05e2\u05e8\u05db\u05ea \u05d4\u05e4\u05e2\u05dc\u05d4 (OS) \u05d4\u05d9\u05d0 \u05d4\u05ea\u05d5\u05db\u05e0\u05d4 \u05d4\u05d1\u05e1\u05d9\u05e1\u05d9\u05ea \u05d4\u05de\u05e0\u05d4\u05dc\u05ea \u05d0\u05ea \u05d7\u05d5\u05de\u05e8\u05ea \u05d4\u05de\u05d7\u05e9\u05d1 \u05d5\u05de\u05e1\u05e4\u05e7\u05ea \u05e9\u05d9\u05e8\u05d5\u05ea\u05d9\u05dd \u05d7\u05d9\u05d5\u05e0\u05d9\u05d9\u05dd \u05dc\u05ea\u05d5\u05db\u05e0\u05d9\u05d5\u05ea \u05de\u05d7\u05e9\u05d1. \u05d4\u05d9\u05d0 \u05e4\u05d5\u05e2\u05dc\u05ea \u05db\u05d2\u05e9\u05e8 \u05d1\u05d9\u05df \u05d9\u05d9\u05e9\u05d5\u05de\u05d9 \u05d4\u05de\u05e9\u05ea\u05de\u05e9 \u05dc\u05e8\u05db\u05d9\u05d1\u05d9\u05dd \u05d4\u05e4\u05d9\u05d6\u05d9\u05d9\u05dd \u05db\u05d2\u05d5\u05df \u05d4\u05de\u05e2\u05d1\u05d3, \u05d4\u05d6\u05d9\u05db\u05e8\u05d5\u05df \u05d5\u05de\u05db\u05e9\u05d9\u05e8\u05d9 \u05d4\u05d0\u05d7\u05e1\u05d5\u05df. \u05de\u05e2\u05e8\u05db\u05ea \u05d4\u05d4\u05e4\u05e2\u05dc\u05d4 \u05de\u05e7\u05e6\u05d4 \u05de\u05e9\u05d0\u05d1\u05d9\u05dd, \u05de\u05ea\u05d6\u05de\u05e0\u05ea \u05de\u05d8\u05dc\u05d5\u05ea \u05d5\u05de\u05d1\u05e7\u05e8\u05ea \u05d4\u05ea\u05e7\u05e0\u05d9\u05dd \u05d4\u05d9\u05e7\u05e4\u05d9\u05d9\u05dd \u05ea\u05d5\u05da \u05d4\u05d1\u05d8\u05d7\u05ea \u05d9\u05e6\u05d9\u05d1\u05d5\u05ea \u05d5\u05d0\u05d1\u05d8\u05d7\u05ea \u05d4\u05de\u05e2\u05e8\u05db\u05ea. \u05d4\u05d9\u05d0 \u05de\u05e4\u05e9\u05d8\u05ea \u05d0\u05ea \u05de\u05d5\u05e8\u05db\u05d1\u05d5\u05ea \u05d4\u05d7\u05d5\u05de\u05e8\u05d4, \u05d5\u05de\u05d0\u05e4\u05e9\u05e8\u05ea \u05dc\u05de\u05e9\u05ea\u05de\u05e9\u05d9\u05dd \u05dc\u05d1\u05e6\u05e2 \u05de\u05e9\u05d9\u05de\u05d5\u05ea \u05dc\u05dc\u05d0 \u05d3\u05d0\u05d2\u05d4 \u05dc\u05e4\u05e8\u05d8\u05d9\u05dd \u05d4\u05d8\u05db\u05e0\u05d9\u05d9\u05dd \u05d4\u05d1\u05e1\u05d9\u05e1\u05d9\u05d9\u05dd. \u05d1\u05e0\u05d5\u05e1\u05e3, \u05de\u05e2\u05e8\u05db\u05ea \u05d4\u05d4\u05e4\u05e2\u05dc\u05d4 \u05de\u05e6\u05d9\u05e2\u05d4 \u05de\u05de\u05e9\u05e7 \u05e2\u05e7\u05d1\u05d9 \u05dc\u05e4\u05d9\u05ea\u05d5\u05d7 \u05ea\u05d5\u05db\u05e0\u05d4 \u05d5\u05d0\u05d9\u05e0\u05d8\u05e8\u05d0\u05e7\u05e6\u05d9\u05d4 \u05e2\u05dd \u05d4\u05de\u05e9\u05ea\u05de\u05e9, \u05d5\u05de\u05d0\u05e4\u05e9\u05e8\u05ea \u05e8\u05d9\u05d1\u05d5\u05d9 \u05de\u05e9\u05d9\u05de\u05d5\u05ea \u05d9\u05e2\u05d9\u05dc, \u05e0\u05d9\u05d4\u05d5\u05dc \u05ea\u05d4\u05dc\u05d9\u05db\u05d9\u05dd \u05d5\u05d8\u05d9\u05e4\u05d5\u05dc \u05d1\u05e0\u05ea\u05d5\u05e0\u05d9\u05dd \u05d1\u05e1\u05d1\u05d9\u05d1\u05d5\u05ea \u05de\u05d7\u05e9\u05d5\u05d1 \u05e9\u05d5\u05e0\u05d5\u05ea. \u05d4\u05d9\u05d0 \u05d7\u05d9\u05d5\u05e0\u05d9\u05ea \u05dc\u05e9\u05d9\u05de\u05d5\u05e9 \u05d9\u05d5\u05de\u05d9\u05d5\u05de\u05d9.</p> <p>\u05d4\u05d0\u05dd \u05d0\u05e4\u05e9\u05e8 \u05dc\u05d4\u05e4\u05e2\u05d9\u05dc \u05de\u05d7\u05e9\u05d1 \u05dc\u05dc\u05d0 \u05de\u05e2\u05e8\u05db\u05ea \u05d4\u05e4\u05e2\u05dc\u05d4? \u05db\u05df . \u05d6\u05d4 \u05e0\u05e7\u05e8\u05d0 bare metal. \u05d1\u05de\u05e7\u05e8\u05d4 \u05d6\u05d4 \u05db\u05dc \u05d4\u05e2\u05d5\u05dc \u05e9\u05dc \u05d8\u05d9\u05e4\u05d5\u05dc \u05d1\u05d7\u05d5\u05de\u05e8\u05d4 \u05e0\u05d5\u05e4\u05dc \u05e2\u05dc \u05d4\u05de\u05e4\u05ea\u05d7.</p>"},{"location":"01/virtual_machines/#virtual-machine","title":"\u05de\u05d4\u05d9 \u05de\u05db\u05d5\u05e0\u05d4 \u05d5\u05d9\u05e8\u05d8\u05d5\u05d0\u05dc\u05d9\u05ea (Virtual Machine)?","text":"<p>\u05de\u05db\u05d5\u05e0\u05d4 \u05d5\u05d9\u05e8\u05d8\u05d5\u05d0\u05dc\u05d9\u05ea (VM) \u05d4\u05d9\u05d0 \u05de\u05e2\u05e8\u05db\u05ea \u05d4\u05de\u05d3\u05de\u05d4 \u05de\u05d7\u05e9\u05d1 \u05e4\u05d9\u05d6\u05d9 \u05e9\u05dc\u05dd \u05d1\u05ea\u05d5\u05da \u05de\u05d7\u05e9\u05d1 \u05d0\u05d7\u05e8. \u05e0\u05d9\u05ea\u05df \u05dc\u05d4\u05e8\u05d9\u05e5 \u05e2\u05dc\u05d9\u05d4 \u05de\u05e2\u05e8\u05db\u05d5\u05ea \u05d4\u05e4\u05e2\u05dc\u05d4 \u05e9\u05d5\u05e0\u05d5\u05ea \u05d5\u05dc\u05d4\u05e8\u05d9\u05e5 \u05d9\u05d9\u05e9\u05d5\u05de\u05d9\u05dd \u05db\u05d0\u05d9\u05dc\u05d5 \u05d4\u05d9\u05d5 \u05e2\u05dc \u05de\u05d7\u05e9\u05d1 \u05e0\u05e4\u05e8\u05d3. \u05dc\u05d3\u05d5\u05d2\u05de\u05d4, \u05d1\u05e2\u05d6\u05e8\u05ea \u05ea\u05d5\u05db\u05e0\u05d4 \u05db\u05de\u05d5 VirtualBox, \u05e0\u05d9\u05ea\u05df \u05dc\u05d4\u05e8\u05d9\u05e5 \u05dc\u05d9\u05e0\u05d5\u05e7\u05e1 \u05d1\u05ea\u05d5\u05da \u05de\u05d7\u05e9\u05d1 \u05e9\u05de\u05e8\u05d9\u05e5 \u05d5\u05d5\u05d9\u05e0\u05d3\u05d5\u05e1, \u05d0\u05d5 \u05d4\u05d4\u05e4\u05da.</p> <p>\u05d4\u05de\u05db\u05d5\u05e0\u05d4 \u05d4\u05d5\u05d5\u05d9\u05e8\u05d8\u05d5\u05d0\u05dc\u05d9\u05ea \u05de\u05e9\u05ea\u05de\u05e9\u05ea \u05d1\u05de\u05e9\u05d0\u05d1\u05d9\u05dd \u05e9\u05dc \u05d4\u05de\u05d7\u05e9\u05d1 \u05d4\u05e4\u05d9\u05d6\u05d9 \u2013 \u05db\u05de\u05d5 \u05de\u05e2\u05d1\u05d3, \u05d6\u05d9\u05db\u05e8\u05d5\u05df \u05d5\u05d3\u05d9\u05e1\u05e7 \u2013 \u05d0\u05da \u05d4\u05d9\u05d0 \u05de\u05d1\u05d5\u05d3\u05d3\u05ea \u05de\u05d4\u05de\u05e2\u05e8\u05db\u05ea \u05d4\u05de\u05d0\u05e8\u05d7\u05ea. \u05d6\u05d4 \u05de\u05d0\u05e4\u05e9\u05e8 \u05dc\u05d1\u05d3\u05d5\u05e7 \u05ea\u05d5\u05db\u05e0\u05d5\u05ea, \u05dc\u05d4\u05e8\u05d9\u05e5 \u05e1\u05d1\u05d9\u05d1\u05d5\u05ea \u05e9\u05d5\u05e0\u05d5\u05ea, \u05d0\u05d5 \u05dc\u05dc\u05de\u05d5\u05d3 \u05e2\u05dc \u05de\u05e2\u05e8\u05db\u05d5\u05ea \u05d4\u05e4\u05e2\u05dc\u05d4 \u2013 \u05dc\u05dc\u05d0 \u05e1\u05d9\u05db\u05d5\u05df \u05dc\u05de\u05e2\u05e8\u05db\u05ea \u05d4\u05e8\u05d0\u05e9\u05d9\u05ea.</p>"},{"location":"01/virtual_machines/#_2","title":"\u05e9\u05e0\u05d9 \u05e1\u05d5\u05d2\u05d9\u05dd \u05e2\u05d9\u05e7\u05e8\u05d9\u05d9\u05dd \u05e9\u05dc \u05de\u05db\u05d5\u05e0\u05d5\u05ea \u05d5\u05d9\u05e8\u05d8\u05d5\u05d0\u05dc\u05d9\u05d5\u05ea:","text":""},{"location":"01/virtual_machines/#1-hypervisor-type-1-bare-metal","title":"1. Hypervisor Type 1 \u2013 \"Bare Metal\"","text":"<ul> <li>\u05e8\u05e5 \u05d9\u05e9\u05d9\u05e8\u05d5\u05ea \u05e2\u05dc \u05d4\u05d7\u05d5\u05de\u05e8\u05d4, \u05d1\u05dc\u05d9 \u05de\u05e2\u05e8\u05db\u05ea \u05d4\u05e4\u05e2\u05dc\u05d4 \u05de\u05d0\u05e8\u05d7\u05ea.</li> <li>\u05d3\u05d5\u05d2\u05de\u05d4: VMware ESXi, Microsoft Hyper-V (\u05d1\u05e9\u05e8\u05ea\u05d9\u05dd).</li> <li>\u05d9\u05e2\u05d9\u05dc \u05d9\u05d5\u05ea\u05e8, \u05de\u05e9\u05de\u05e9 \u05d1\u05d3\u05d0\u05d8\u05d4 \u05e1\u05e0\u05d8\u05e8\u05d9\u05dd.</li> </ul>"},{"location":"01/virtual_machines/#2-hypervisor-type-2-hosted","title":"2. Hypervisor Type 2 \u2013 \"Hosted\"","text":"<ul> <li>\u05e8\u05e5 \u05e2\u05dc \u05d2\u05d1\u05d9 \u05de\u05e2\u05e8\u05db\u05ea \u05d4\u05e4\u05e2\u05dc\u05d4 \u05e7\u05d9\u05d9\u05de\u05ea.</li> <li>\u05d3\u05d5\u05d2\u05de\u05d4: VirtualBox, VMware Workstation.</li> <li>\u05e4\u05e9\u05d5\u05d8 \u05dc\u05e9\u05d9\u05de\u05d5\u05e9, \u05de\u05ea\u05d0\u05d9\u05dd \u05dc\u05de\u05e9\u05ea\u05de\u05e9\u05d9\u05dd \u05d0\u05d9\u05e9\u05d9\u05d9\u05dd \u05d5\u05dc\u05e4\u05d9\u05ea\u05d5\u05d7.</li> </ul>"},{"location":"01/virtual_machines/#hypervisor-type-1-type-2","title":"\u05d0\u05d9\u05d5\u05e8 \u05d4\u05de\u05d3\u05d2\u05d9\u05dd \u05d0\u05ea \u05d4\u05d4\u05d1\u05d3\u05dc \u05d1\u05d9\u05df Hypervisor Type 1 \u05dc-Type 2:","text":"<p>https://medium.com/@ravipatel.it/understanding-hypervisors-exploring-type-1-vs-type-2-and-full-vs-para-virtualization-71b4dad9abd9</p> <p>Now go and install VirtualBox on your computer.</p>"},{"location":"01/virtual_machines/#installing-linux-in-virtualbox-3-alternatives","title":"Installing Linux in VirtualBox: 3 alternatives","text":""},{"location":"01/virtual_machines/#watch-the-videos-alt1-alt2","title":"Watch the videos (alt1, alt2)","text":"<p>In these videos, we install two variants of linux (each in its own VM)</p> <p>The first one is installing \"linux lite\" which has a GUI. It is pre-installed on a (virtual hard disk), so all we have to do is create the machine, and connect the hard disk. See it \ud83c\udfa5 here</p> <p>The second is \"installing alpine linux\" which is a tiny, no GUI version of linux. We create a machine as before, and then follow all the steps until there is an installed linux! This be used later, so don't skip!  See it \ud83c\udfa5 here</p>"},{"location":"01/virtual_machines/#or-take-the-shortcut-alt3","title":"or, Take the shortcut (alt3)","text":"<p>Follow the instructions in Installing Linux in VirtualBox in 3 steps</p> <p></p>"},{"location":"01/virtual_machines/#snapshots-how-to-go-back-to-a-good-state","title":"Snapshots -- how to go back to a good state","text":"<p>VirtualBox snapshots are useful because they let you save the exact state of a virtual machine, including:</p> <ul> <li>Disk contents</li> <li>Memory (RAM)</li> <li>Settings</li> </ul> <p>This means you can:</p> <p>\ud83d\udd52 Go back in time \u2014 If something breaks (like a misconfigured boot file), you can quickly revert to the last working state.</p> <p>\ud83e\uddea Experiment safely \u2014 Try changes without fear. If it fails, restore the snapshot.</p> <p>\ud83d\udca1 Fast recovery \u2014 No need to reinstall or reconfigure your system.</p> <p>In short: Snapshots = undo button for your VM.</p> <p>snapshot in Oracle site</p>"},{"location":"02/ch_02/","title":"Chapter 2: Navigating the Linux File System","text":""},{"location":"02/ch_02/#what-is-a-file-system","title":"What is a File System?","text":"<p>A file system is the way an operating system organizes and manages data on a storage device, like a hard drive, SSD, or USB stick. It defines how files are named, stored, retrieved, and organized on the disk.</p> <p>Think of it like a Library: - The books are your files. - The shelves and catalog system are the file system. - It keeps track of where each file is, what it's called, when it was last modified, and who can access it.</p> <p>Sometime you (the end user) doesn't care at all about files and folders. Other times, it is critical for the proper usage of the program you now need.</p> <p>for example, when using Google docs, you are not aware of files. You see only documents and pictures, and Google' code is responsibe to expose only the nice view without exposing the underlying file structures. But it is there anyhow.</p> <p>When using Windows or linux, you need to be aware of the file system. For example, if you have two disks (C: and D: ), and disk C: is full, it is YOUR responsibilty to delete files and move to other places.</p> <p>See the table and guess which file system is the oldest:</p> File System Used By Max File Size Max Number of Files Notes NTFS Windows 16 TB (practical) ~4.3 billion Supports permissions, encryption, compression FAT Legacy systems, floppy disks 2 GB ~65,536 (per volume) Very old; used in DOS; obsolete for most uses FAT32 USB drives, older systems 4 GB minus 1 byte ~268 million (theoretical) Widely compatible, but limited by 4 GB file size exFAT USBs across OSes 16 EB ~2.7 million (per directory) Great for large files; good cross-platform use ext4 Linux 16 TB (single file) 4 billion Fast, reliable, supports journaling APFS macOS 8 EB Virtually unlimited Modern, optimized for SSDs <p>Is storing file in folders, creating hierachical tree, the only way? Short answer is no, but practically, the alternatives are not common.</p> <p>Most desktops and servers still use traditional hierarchical file systems like:</p> <ul> <li>ext4, XFS, Btrfs (on Linux)</li> <li>NTFS (on Windows)</li> <li>APFS (on macOS)</li> </ul> <p>These systems are fast, mature, widely supported, and fit the mental model users and software expect \u2014 folders, paths, permissions.</p> <p>Why Alternatives Aren\u2019t Common as Primary FS: - Compatibility: Most software expects paths like /home/user/file.txt. - User Expectation: Hierarchies are simple and intuitive. - Tools &amp; APIs: Most OS APIs and shell tools (like ls, cd, cp) assume a directory tree. - Performance &amp; maturity: Non-hierarchical systems are often experimental, or good for narrow use cases.</p> <p>In a future lesson we will dive into more details, but for now, all we need to know about file systems: - data is stored in files. - each file has some metadata (\"data about the data\") such as \"who can access this file\", and \"when was the file created\" - file are stored in folders. In Windows it is called Folder. In linux, directory</p> <p>Advanced users of linux can choose the file system that is best for a specific job. Once selected, it is rarely changed. </p>"},{"location":"02/ch_02/#check-yourself","title":"Check yourself","text":"<ul> <li>find what file system is used in your OS.</li> <li>For the file system you found (e.g. NTFS), is it possible for linux to read contents from this disk?</li> <li> <p>If the answer to the above is yes, does it mean that the file system is a \"first class citizen\" in linux? (hint: what about write/date/permission/sizes/performance/encryption,snapshots)</p> </li> <li> <p>Let's say you have a disk of 1TB with a file system, and the disk is almost full. Is it possible to add another disk, and \"expand\" the file system to use both disks? This will allow transparent growth - no more \"drive C: is full, D: is empty and I can't move from there to here\". Take it to ChatGpt</p> </li> </ul>"},{"location":"02/ch_02/#is-it-realy-that-simple","title":"Is it realy that simple?","text":"<p>We can spend a few years discussing problems and solutions of file systems. Ask an AI about it, and prepare a long time.</p>"},{"location":"02/ch_02/#the-linux-file-system-structure","title":"The linux file system structure","text":"<p>Regardless of the file system used, the structure (directories) looks the same. It is almost the same for all linux distros and even have a standard, so when you arrive to a new linux machine, you will probably know where to look for certain files.</p> <p>The Linux file system structure refers to how files and directories are organized in a Linux system. It starts with a single root directory /, and everything branches off from there \u2014 unlike Windows, which has separate drive letters (C:\\, D:\\, etc.).</p> <p>Having everything (realy everything, even if you have 12 disks and network drives) is under \"/\". This is a very strong abstraction as we will see in the future.</p> <p>## history lesson  In Windows, You are tied to the physical disk installed. But unix was before Windows, so why the latter OS is more primitive?</p> <p>Windows took it from DOS, missing the opportunity to getting mature.   DOS took it from CP/M  -- a tiny OS that Bill Gates based the DOS on (* GPT said: '\u2b50 Overall Verdict: \u2705 Mostly accurate, with some historical simplification' ).</p> <p>CP/M was tiny OS, targetted for 1980' PC, with one or two floppy drives. There was no reason to write complicated code like in unix.</p> <p>Why C: ?  In the begnining, only rich people had a hard drive! A PC had two Floppy drives  called A: and B: (and somtime only one). The letters were not movable: even if you don't have drive B:, the first harddisk must be C:.    And so in 2025, some 35 years later, we are still suffering from that early sin.</p> <p></p>"},{"location":"02/ch_02/#the-general-tree-structure-in-linux-systems","title":"The general tree structure in linux systems","text":"<p>There is a Filesystem Hierarchy Standard and more or less, all distros use it. The differences are where exactly some files are stored inside a sub directory. (annoying, but managable)</p> <pre><code>/\n\u251c\u2500\u2500 bin/\n\u251c\u2500\u2500 boot/\n\u251c\u2500\u2500 dev/\n\u251c\u2500\u2500 etc/\n\u251c\u2500\u2500 home/\n\u251c\u2500\u2500 lib/\n\u251c\u2500\u2500 media/\n\u251c\u2500\u2500 opt/\n\u251c\u2500\u2500 proc/\n\u251c\u2500\u2500 root/\n\u251c\u2500\u2500 run/\n\u251c\u2500\u2500 sbin/\n\u251c\u2500\u2500 sys/\n\u251c\u2500\u2500 usr/\n\u2514\u2500\u2500 var/\n</code></pre> <p></p> <p>\ud83d\udcc1 Key Directories Explained (just the more useful at this time)</p> <pre><code>Directory   What It Contains\n/       The root of the file system \u2014 everything starts here\n/bin    Essential command-line tools (ls, cp, rm, etc.)\n/sbin   System binaries \u2014 tools for root/admin (reboot, fdisk)\n/etc    System-wide configuration files (passwd, hosts, etc.)\n/home   User home directories (/home/alice, /home/bob)\n/var    Variable data like logs, mail, and spool files\n/usr    User programs and libraries \u2014 big area with /usr/bin, /usr/lib, etc.\n...\n</code></pre> <p>How It's Different from Windows?</p> Windows Linux <code>C:\\Program Files\\</code> <code>/usr/bin/</code>, <code>/opt/</code> <code>C:\\Users\\</code> <code>/home/</code> Drive letters (<code>C:\\</code>, <code>D:\\</code>) Everything under <code>/</code> Registry for settings Text config files in <code>/etc/</code> <p>But even in linux you will see some mess. For example, some programs store ALL their configuration data in /etc/. some will store in /etc/ the general configuration and in /path/to/your/.config/prog_name some more value, and some will keep it in god-knows-where. Still better than going into the registry and Roaming/AppData in Windows!</p> <p>To summarize the above:</p> <ul> <li>Your files are in /home/your-user-name</li> <li>you can read most of the files in the system (i.e. under '/')</li> <li>programs are stored in mainly in /bin and /sbin (but we don't care much as long as it works)</li> <li>the general tree structure is kept in all linux distros.</li> <li>EVERTYHING is under \"/\" (the root, not to be confused with the \"root user\").Even remote disks and network drives.</li> </ul>"},{"location":"02/ch_02/#check-yourself_1","title":"Check yourself","text":"<ol> <li>boot into alpine linux (from the previous lesson)</li> <li>type exactly this <code>ls /</code> . You should see similar list of folders.</li> <li>To see the content of a folder (e.g. <code>/etc/</code>), type <code>ls /etc</code> (don't forget the ENTER key). </li> <li>Teaser: How do you mark a file as hidden? How do you do it in Windows?</li> </ol> <p>We will go into details when learning simple commands. For now, it is enough to know that <code>ls</code> is list files</p>"},{"location":"02/terminal/","title":"Demystifying the terminal","text":"<p>The terminal is a text-based tool that lets you control your computer by typing commands. It's a fast, powerful alternative to using the mouse and menus.</p> <p>It allows you to do what you can do from the GUI, but faster, repeatable and scriptable.</p> <p>Example: move a file from /path/to/file1 to /path/to/other/file2.</p> <p>Using the File Manager, You can open two windows, open the relevant directories, and drag from source to destination.</p> <p>Using the terminal, you type this command line <code>mv /path/to/file1 /path/to/other/file2</code></p> <p>There are tasks which are easier using the GUI such as selecting muplitple files with no common name, or based on visual cues (picture thumbnails). Don't be fanatic. Use what works best.</p> <p>Example: Move all files with extension DOCX to another folder</p> <p>\u2139\ufe0f  folder and directory are synonims.</p> <p>Using File Manager: set to list view, sort by extension, scroll down until the first file, select it, scroll down until the last one, SHIFT select it, drag to the destination folder which you already prepared, release the mouse button.</p> <p>Using command line: <code>mv *.docx path/to/destination</code></p>"},{"location":"02/terminal/#is-it-a-shell-or-a-terminal","title":"Is it a SHELL or a TERMINAL?!","text":""},{"location":"02/terminal/#shell","title":"Shell:","text":"<p>The shell is the program that actually interprets your commands and talks to the operating system. It's running inside the terminal.</p>"},{"location":"02/terminal/#a-terminal-or-terminal-emulator","title":"A terminal (or terminal emulator)","text":"<p>is the program you use to interact with the shell. It provides the window and text interface where you type commands.</p> <p>Examples: gnome-terminal, xterm, konsole, Windows Terminal</p> <p>Think of it like the TV screen and keyboard.</p> <p>In practice, we use these name interchangably. </p>"},{"location":"02/terminal/#common-commands","title":"Common commands","text":"<pre><code>pwd            # Show where you are (Present Working Directory)\nls             # List files and folders\nls -l          # Long listing (details)\ncd /           # Go to root (Change Directory)\ncd ~           # Go to home\ncd Documents   # Go to Documents (if it exists)\ncd ..          # Go up one level\n</code></pre> <p>\ud83d\udcdd Tip: Use Tab to auto-complete folder names!</p> <p>\ud83c\udfa5 open the video, and execute the commands below</p>"},{"location":"02/terminal/#excercise-copying-a-file","title":"\ud83d\udcbb Excercise -- copying a file","text":"<p>Open a terminal.  If using Alpine, it is already open. If using Windows WSL, open the Ubuntu, and this is the terminal. If using a linux with GUI, type <code>Ctrl+Alt+t</code> </p> <p>You are now in the home directory (<code>/home/your-name</code>).</p> <p>Last time to say it: at the end of each line, press <code>Enter</code> (<code>Return</code> on some keyboards)</p> <p>NOTE: the <code>#</code> means start a comment, so no need to type it!</p> <pre><code>touch notes.txt              # Create an empty file\ncp notes.txt notes_backup.txt  # Copy file\ncp notes.txt Documents/       # Copy into a folder\n</code></pre> <p>\u2139\ufe0f Almost all commands have optional flags that affect the command's operation.  Try <code>cp --help</code> and <code>man cp</code></p> <p>\u2139\ufe0f The 'Documents' directory exists in Ubuntu but not in Alpine.</p>"},{"location":"02/terminal/#excercise-moving-and-renaming-a-file","title":"\ud83d\udcbb Excercise -- moving and renaming a file","text":"<pre><code>mv notes.txt archive.txt     # Rename\nmv archive.txt Documents/    # Move to folder\n</code></pre> <p>\u26a0\ufe0f the <code>mv</code> command (like most others) will NOT ask for confirmation before overwriting file! <code>mv some_file existing_file</code> will silently replace <code>existing_file</code> with <code>some_file</code></p> <p>\u2139\ufe0f mv works for both moving and renaming</p> <p>\u2705 Check yourself</p> <p>Let's say you have a large file and you need to move it to another directory. Will the file be copied to the destination and then the source file be deleted?</p> <p>Now the destination directory is on another hard-drive. will the underlying operation be changed? Will the command syntax be changed?</p>"},{"location":"02/terminal/#excercise-deleting-files-and-directories","title":"\ud83d\udcbb Excercise -- deleting files and directories","text":"<pre><code>rm notes_backup.txt         # Delete a file\nrm -i archive.txt           # Delete with confirmation\nrm -i Documents/archive.txt \n</code></pre> <p>\u26a0\ufe0f  rm is permanent \u2014 no Trash/Recycle Bin. A deleted file is gone forever. Yes really. you can mess things up. Use git!</p> <p>\u26a0\ufe0f By default, the <code>rm</code> just does its job without confirmation. </p> <p><code>rm Documents/</code></p> <p>Don't worry - to delete a directory you need to use <code>rmdir</code> (safety, anyone?).  Try <code>rmdir Documents</code>. Why the fail?</p> <p> \u2139\ufe0f  Closing the terminal If it is the only terminal (such as in Alpine), it will sign you out ('log off').</p> <p>type <code>exit</code> or press <code>ctrl-d</code></p>"},{"location":"03/ch_03/","title":"Chapter 3: Working with Files and Directories","text":"<p>We have files a directories. What can we do with them?</p> <p>The obvious is to open a file, e.g. open a JPEG with photo viewer app. But there is so much more!</p> <p>First, let's use a file large enough that will not fit in the terminal's screen.</p> <p>\ud83c\udfa5 open the video, and exectute the commands below</p> <p><code>ls /var/log/dmesg</code> . If the file exists, its name is printed. If not, an error is printed.</p> <p><code>cat /var/log/dmesg</code> will print the whole file contents to the screen. Because the file is too long, we miss the first part. Use <code>less /var/log/dmesg</code> and press <code>space bar</code> to move pages.</p> <p>To see the first N (default 10) lines: <code>head /var/log/dmesg</code> or the last lines: <code>tail /var/log/dmesg</code></p>"},{"location":"03/ch_03/#excercise-create-a-directory","title":"\ud83d\udcbb Excercise -- create a directory","text":"<p>make sure you are in your home directory: <code>cd ~</code> . The <code>~</code> is a special sign for the terminal program meaning \"current user' home directory\". </p> <p>Create a new directory: <code>mkdir chap3</code>  . As you correctly guessed, mkdir == Make Directory.</p> <p>Create a new empty file in it: <code>touch chap3/barbara</code> Create another directory inside: <code>mkdir chap3/insider</code> Create a file there: <code>touch chap3/insider/tuchman</code></p> <p>\u2139\ufe0f There are a few special characters to help navigating:</p> <pre>\n~     home directory\n.     current directory\n..    one directory up\n</pre> <p>At last, copy the contents of chap3 to the current directory: <code>cp chap3/* .</code></p> <p>\u2705 Find how to copy ALL the contents of the directory.</p>"},{"location":"03/ch_03/#the-find-tool","title":"The <code>find</code> tool","text":"<p>This is a very capable tool to find file/dirs according to many criteria. It can be simple as \"find all file with extension txt in the current dir (and sub directories)\" ,to \"find (starting from root) all files (but not dirs) that are at most 3 weeks old, and their size is at least 50KB. When found, search for the string \"log\". if the string is found, print the file name\"</p> <p>The easy ones, we can remember: <code>find -name \"*.txt\"</code> </p> <p>for the more complex tasks, I shamelessly use GPT: <code>find / -type f -mtime -21 -size +50k -exec grep -l \"log\" {} +</code></p> <p>This command has tons of options. Part of its strenght is that once a file/dir is found, some operations on it can be executed (search within it in this example), and the operation can be any linux command!</p>"},{"location":"03/ch_03/#locate-a-command","title":"locate a command","text":"<p>When we type a command (for example <code>date</code>), the shell looks for a file with that name (* minor lie here) and if found, execute it. How can we find where is the vast dir tree is this command?</p> <p>Use <code>which date</code>.  In Alpine it tells us there is a file at <code>/bin/date</code>  In Ubuntu , the location is <code>/usr/bin/date</code></p> <p>\u2705 Try it!</p>"},{"location":"03/ch_03/#file-types","title":"File Types","text":"<p>What is the file type of \"my_selfie.jpg\" ? If running in Windows, The program in which you see the file name (called File Explorer, but who cares), will simply look at the extension jpg, check its list of installed applications, run the matching program (if found) and hand it this file. </p> <p>In windows, nobody cares what is inside the file. If the extension is JPG, in surely is a JPEG image!</p> <p>In linux, its is a different: the file type is deduced by opening it, reading some data (until we have enough to have a decision) and then we know for sure what is the correct file type.</p> <p>\u2705 create a file with some text in it: <code>echo \"I love shell\" &gt; selfie.jpg</code> Then run <code>file selfie.jpg</code> and see what it says.</p> <p>\u26a0\ufe0f the <code>file</code> command is not installed in Alpine (this is why is is so lightweight...)</p>"},{"location":"03/ch_03/#execrcise-how-many-lines-in-that-file","title":"\ud83d\udcbb Execrcise - how many lines in that file?","text":"<p>run <code>wc --help</code>.</p> <p>How many lines are in <code>/var/log/dmesg</code>?  What is its file type?</p>"},{"location":"03/redirection/","title":"Chapter NN Text Streams, Redirection, and Pipes in Linux","text":""},{"location":"03/redirection/#why-do-linux-programs-use-text","title":"Why Do Linux Programs Use Text?","text":"<p>Linux programs often use plain text as input and output because: - It's simple and human-readable - Easy to chain commands together - Works well with files, logs, and automation - Text can be easily redirected or filtered</p> <p>Most command-line tools follow a \"do one thing well\" philosophy and communicate by reading and writing lines of text.</p>"},{"location":"03/redirection/#what-are-stdin-stdout-and-stderr","title":"\ud83d\udce5\ud83d\udce4 What Are stdin, stdout, and stderr?","text":"<p>Every Linux program gets three standard data streams:</p> Stream Name Purpose <code>stdin</code> Standard Input Where the program reads input (keyboard, file, or another command) <code>stdout</code> Standard Output Where the program writes normal output <code>stderr</code> Standard Error Where the program writes error messages <p>You don\u2019t usually see these streams directly \u2014 but you can control them with redirection and pipes.</p> <p>\u2139\ufe0f The fact that the data streams are provided, does not mean that program use ! For example, a GUI program (e.g. file explorer, video player) will not use stdin. </p> <p>These are mostly used with text based content</p>"},{"location":"03/redirection/#redirects-2","title":"\ud83d\udd04 Redirects (<code>&gt;</code>, <code>&gt;&gt;</code>, <code>&lt;</code>, <code>2&gt;</code>)","text":"<p>Redirection lets you change where a command reads from or writes to:</p> Symbol Meaning <code>&gt;</code> Send stdout to a file (overwrite) <code>&gt;&gt;</code> Send stdout to a file (append) <code>&lt;</code> Read stdin from a file <code>2&gt;</code> Send stderr to a file <code>&amp;&gt;</code> Send stdout and stderr to a file"},{"location":"03/redirection/#examples","title":"\ud83d\udcd8 Examples:","text":"<pre><code>echo \"hello\" &gt; out.txt      # Write to file\ncat &lt; out.txt               # Read from file\nls /fake/dir 2&gt; error.txt   # Capture errors only\ncommand &amp;&gt; all_output.txt   # Capture everything\n</code></pre>"},{"location":"03/redirection/#what-are-pipes","title":"What Are Pipes (<code>|</code>)?","text":"<p>A pipe takes the stdout of one command and connects it to the stdin of another:</p> <pre><code>command1 | command2\n</code></pre> <p>This lets you build powerful chains of tools.</p> <p>The Beuty of it is that the program itself is not aware to the redirection. It keeps reading from stdin and writing to stdout.</p>"},{"location":"03/redirection/#all-piped-commands-run-concurrently","title":"All piped commands Run Concurrently!","text":"<p>When you use a pipe: - Both commands run at the same time - Output from <code>command1</code> is sent on the fly to <code>command2</code> - The shell handles this connection behind the scenes</p>"},{"location":"03/redirection/#check-yourself","title":"\u2705 check yourself","text":"<ol> <li>how many commands can be piped? Can I run <code>ls | grep x | wc | sort</code> ?</li> <li>if the second command (of four commands) fails, but the other succeeds, will the whole command fail or succeed?  What would you want it to be?</li> </ol> <p>!!TODO!!</p> <p>\ud83c\udfa5 open the video, and execute the commands below</p>"},{"location":"03/redirection/#examples_1","title":"Examples:","text":"<pre><code>ls -l | less\ncat file.txt | grep \"error\"\nps aux | grep firefox | wc -l\n</code></pre>"},{"location":"03/redirection/#example-filter-to-stderr","title":"Example: Filter to stderr","text":"<p>Sometimes you want to send only errors to another command or to a file.</p>"},{"location":"03/redirection/#example-with-find","title":"Example with <code>find</code>:","text":"<pre><code>find / -name \"*.conf\" 2&gt; errors.txt\n</code></pre> <ul> <li><code>find</code> may fail to read some directories</li> <li><code>2&gt;</code> redirects only stderr to <code>errors.txt</code></li> <li>Normal results (stdout) still appear in the terminal</li> </ul> <p>Or send both to separate places:</p> <pre><code>find / -name \"*.conf\" &gt; results.txt 2&gt; errors.txt\n</code></pre>"},{"location":"03/redirection/#summary","title":"\u2705 Summary","text":"<ul> <li>Linux programs use text to stay simple, flexible, and composable</li> <li><code>stdin</code>, <code>stdout</code>, and <code>stderr</code> are standard ways to communicate</li> <li>Redirection (<code>&gt;</code>, <code>&lt;</code>, <code>2&gt;</code>) lets you control input/output</li> <li>Pipes (<code>|</code>) connect programs together \u2014 and run concurrently</li> <li>You can separate normal output and errors when needed</li> </ul>"},{"location":"04/ch_04/","title":"Chapter 4: File Permissions and Ownership","text":"<p>(content partialy taken from course 095219/07_linux_tools)</p> <p>The concept of file in nix is very strong. It proves it by living without change for 50 years.  Anything that implements {open, close, read, write, seek}* can be a file. A file can be simply a storage: keep a text document, a picture, executable program, source code...</p> <p>Linux exposes hardware and OS details using \u201cfiles\u201d that do not represent actual storage.</p> <p>example: <code>/dev   /proc   /sys</code></p> <p>Go ahead and try </p> <pre><code>cat /proc/cpuinfo     \ncat /cpu/meminfo\n</code></pre>"},{"location":"04/ch_04/#file-permissions","title":"File permissions","text":"<p>A file has permissions: who can do what. A Directory (now referring to storage!) is also a file!</p> <p>This means that by using file permissions, we can recursively give access to directory to a specific user/group.</p> <p>Linux file permissions are a crucial aspect of the operating system, governing how users and processes can access and modify files. They establish a security layer, ensuring only authorized entities can interact with data. Here's a breakdown of the key concepts:</p>"},{"location":"04/ch_04/#understanding-the-actors","title":"Understanding the Actors","text":"<p>User: Refers to an individual with an account on the system. </p> <p>Group: A collection of users who share certain permissions. </p> <p>Others: All users who are not the owner or part of the group associated with the file. </p> <p>In the old days, file permissions were ONLY by user/group/other. With today\u2019s challenges, there are sometimes variations \u2013 adding more security features. See Appendix A for more on File Systems</p>"},{"location":"04/ch_04/#the-permission-trio","title":"The Permission Trio","text":"<p>Each file and directory in Linux have three permission sets: * Read (r): Allows users to view the contents of a file or list the contents of a directory. </p> <ul> <li> <p>Write (w): Enables users to modify the contents of a file or create/delete files within a directory (requires write permission on the directory itself). </p> </li> <li> <p>Execute (x): Grants users the ability to execute a file if it's a program (executable file). For directories, the execute permission allows users to access the directory contents (listing files). </p> </li> </ul>"},{"location":"04/ch_04/#visualizing-permissions","title":"Visualizing Permissions:","text":"<p>File permissions are typically represented using an octal (base-8) number, where each digit corresponds to a permission set for the owner, group, and others (in that order). Each digit is further broken down as a combination of the read (r = 4), write (w = 2), and execute (x = 1) permissions:</p> <ul> <li>If a permission is present, its corresponding value is added. </li> <li>If a permission is absent, its value is 0.  For example, a permission of 751 translates to:</li> <li>Owner: Read (4), Write (2), and Execute (1) permissions (full access). </li> <li>Group: Read (4) and Execute (1) permissions. </li> <li>Others: Execute (1) permission only. </li> </ul>"},{"location":"04/ch_04/#common-permission-examples","title":"Common Permission Examples:","text":"<ul> <li>644: Read and write for owner, read for group and others (common for user files). </li> <li>755: Read, write, and execute for owner, read and execute for group and others (common for executable programs). </li> <li>700: Read, write, and execute only for the owner (highly restrictive). </li> </ul>"},{"location":"04/ch_04/#changing-permissions","title":"Changing Permissions","text":"<p>The <code>chmod</code> command allows you to modify file permissions. For instance, to grant everyone (i.e. <code>other</code>) read permission for a file named \"data.txt\", you would use:  <code>chmod o+r data.txt</code></p> <p>and see the <code>ls -l</code> output:</p>  -rwxr-xr-- 1 cnoam  cdrom 1234 Jan  2 00:00 file.txt     \u2b06\ufe0f         \u2b06\ufe0f    \u2b06\ufe0f   \u2b06\ufe0f      \u2b06\ufe0f         \u2b06\ufe0f  Permissions   User   group Size    Date       name  <p>note: we ignore the \"1\" before the name </p> <p>The first column <code>(-rwxr-xr--)</code> represents the permissions: * <code>-</code> : File type (- for a regular file, d for a directory) * <code>rwx</code>: Permissions for the owner. * <code>r-x</code>: Permissions for the group. * <code>r--</code>: Permissions for others</p> <p>You can also use symbolic Mode: <code>chmod [who][operation][permission] file</code> * who: u (user/owner), g (group), o (others), a (all). *  operation: + (add), - (remove), = (set exact).</p> <p>Examples:</p> <pre><code>chmod u+x file.txt       # Add execute permission for the owner\nchmod g-w file.txt       # Remove write permission for the group\nchmod o=r file.txt       # Set read-only permission for others\nchmod a+rw file.txt      # Add read and write permissions for all\n</code></pre> <p>Numeric Mode:  * Permissions are represented by a three-digit octal number. * Each digit ranges from 0 to 7 and represents a combination of read (4), write (2), and execute (1) permissions.</p> <pre><code>chmod 755 file.txt       # Set permissions to rwxr-xr-x\nchmod 644 file.txt       # Set permissions to rw-r--r--\nchmod 700 file.txt       # Set permissions to rwx------\nchmod 666 file.txt       # Set permissions to rw-rw-rw-\n</code></pre>"},{"location":"04/ch_04/#excercise-change-file-permissions","title":"\ud83d\udcbb Excercise --- change file permissions","text":"<ol> <li>Create a file named example.txt.</li> <li>View the permissions of <code>example.txt</code>.</li> <li>Add execute permission for the owner of example.txt.</li> <li>Verify the permissions.</li> <li>Remove write permission for the group.</li> <li>Set permissions to <code>rwxr-xr--</code> for example.txt using a single command</li> <li>Verify the permissions.</li> </ol>"},{"location":"04/ch_04/#excercise-create-executable-file","title":"\ud83d\udcbb Excercise --- create executable file","text":"<ol> <li>Create a file called script.sh</li> <li>Add <code>echo \u2018hello world\u2019</code> to the script (so it will print hello world)</li> <li>Try to run the script <code>./script.sh</code> . It should fail running.</li> <li>Fix it and run it.</li> </ol>"},{"location":"04/ch_04/#understanding-file-ownership","title":"Understanding File Ownership","text":"<ul> <li>Each file has an owner (user) and a group associated with it. </li> <li>The owner can change the permissions for the file using chmod. </li> <li>The system administrator (root) has special privileges and can modify permissions for any file. </li> </ul>"},{"location":"04/ch_04/#impact-on-security","title":"Impact on Security","text":"<p>Proper file permissions are essential for system security. They prevent unauthorized users from accessing or modifying sensitive data. </p> <p>In summary, Linux file permissions offer a granular control system, ensuring data is protected while allowing authorized users the necessary access levels. </p>"},{"location":"04/ch_04/#example","title":"Example:","text":"<p>The regular user can enter the directory, view a file, but not create a new file or delete it.</p> <p>As user <code>root</code> I typed </p> <pre><code>mkdir test\ntouch test/fileA\n</code></pre> <pre><code>$ ls -ld test \ndrwxr-xr-x 2 root root 4096 Mar 18 13:36 test \n$ cd test \n$ ls \nfileA \n$ touch newfile \ntouch: cannot touch 'newfile': Permission denied \n$ cat fileA \n$ rm fileA \nrm: remove write-protected regular empty file 'fileA'? y \nrm: cannot remove 'fileA': Permission denied \n$ \n$ sudo chmod a-x test \n$ ls -ld test \ndrw-r--r-- 2 root root 4096 Mar 18 13:36 test \n$ cd test \nbash: cd: test: Permission denied\n</code></pre>"},{"location":"04/ch_04/#check-yourself","title":"Check yourself","text":"<ol> <li>Create directory named <code>parent</code> with these permissions <code>drwx---r-x root root .</code> Hint: To set ownership, run <code>sudo chown root:root parent</code></li> <li> <p>Create a sub directory <code>child</code> with permissions <code>0777</code> Can you list the files in child?  Can you modify a file in child?  Delete a file? Create a file?  Confused?</p> </li> <li> <p>Try the same with a file in <code>parent</code></p> </li> </ol>"},{"location":"04/ch_04/#but-why","title":"BUT WHY?","text":"<p>For a directory: <code>x</code> means you can traverse the directory (access files if you know their name).</p> <p><code>w</code> means you can write to the directory \u2013 adding or deleting files.  So you might be able to edit an existing file, but you not delete it!</p>"},{"location":"04/ch_04/#summary","title":"Summary","text":"<p>You can have read/write access to a sub directory, while being limited in the parent</p>"},{"location":"04/ch_04/#know-these-commands","title":"Know these commands","text":"<p><code>chmod</code>: change file permissions  <code>chown</code>: change file ownership. It can be used recursively. By default, the command is NOT recursive</p>"},{"location":"04/ch_04/#file-dates","title":"File Dates","text":"<p>Each file has three timestamps</p> <ol> <li>Access Time (<code>atime</code>): last time the file was accessed. Updating this field can be turned off to improve performance.</li> <li> <p>Modification Time (<code>mtime</code>): Represents the last time the file's content was actually modified</p> </li> <li> <p>Change Time (<code>ctime</code>): Records the last time the file's metadata (excluding content) was changed. This could include modifications to file permissions, ownership, or group association.</p> </li> </ol> <p>Note that file creation time is not always available (it is not required by the POSIX standard)</p> <p>Fun fact: In Windows, even in the 21st century, the modification time of a file can be before the creation time. </p>"},{"location":"04/ch_04/#directory-timestamps","title":"Directory timestamps","text":"<p>A directory is also a file, so it has these timestamps.</p> <p><code>atime</code> (Access Time) * Updated when the directory is read (e.g., when listing its contents with ls or traversing it). * Some systems optimize it away unless explicitly enabled (e.g., using relatime).</p> <p><code>mtime</code> (Modification Time) * Updated when the contents of the directory change \u2014 i.e., when files are added, removed, or renamed inside the directory.</p> <p><code>ctime</code> (Change Time) * Updated when the directory's metadata changes \u2014 including changes to ownership, permissions, or when <code>mtime</code> itself changes.</p> <p>Example List file from old to new modification time in long format:</p> <p><code>ls \u2013lrt # long format, reverse order, sort by modification time</code></p>"},{"location":"04/ch_04/#-","title":"---","text":""},{"location":"04/ch_04/#summary_1","title":"Summary","text":"<p>Linux treats everything as a file \u2014 even hardware and system interfaces (e.g., <code>/dev</code>, <code>/proc</code>). These may not represent actual storage but can be read like regular files.</p>"},{"location":"04/ch_04/#file-permissions_1","title":"File Permissions","text":"<p>Files and directories have permissions: - Read (r): view file content or list directory - Write (w): modify file or create/delete in directory - Execute (x): run file or access directory contents</p> <p>Permissions apply to: - Owner (user) - Group - Others</p>"},{"location":"04/ch_04/#file-ownership","title":"File Ownership","text":"<p>Each file has: - An owner (user) - An associated group</p> <p>Only the owner or <code>root</code> can change permissions or ownership.</p>"},{"location":"04/ch_04/#file-timestamps","title":"File Timestamps","text":"<p>All files and directories have: - <code>atime</code> \u2013 Last accessed time - <code>mtime</code> \u2013 Last content modification time - <code>ctime</code> \u2013 Last metadata change time (e.g., permissions)</p> <p>These timestamps help track activity and control security.</p> <p>Linux permissions provide fine-grained access control and are critical for maintaining system security.</p>"},{"location":"05/ch_05/","title":"Chapter 5: Basic Linux Commands","text":"<p>In this chapter we will cover a few command which are helpful to get along in the shell.</p>"},{"location":"05/ch_05/#system-information-commands","title":"System information commands","text":"<p><code>whoami</code> \u2013 Tells you your username (i.e., who is logged in).</p> <p><code>hostname</code> \u2013 Shows the name of the computer (helpful if you're connected to a remote system).</p> <p><code>date</code> \u2013 Displays the current date and time according to the system.</p>"},{"location":"05/ch_05/#excercise","title":"\ud83d\udcbb Excercise","text":"<p>Print the current date in YYYY-MM-DD format</p> <p><code>uptime</code> \u2013 Tells you how long the system has been running since its last reboot, and how busy it is. Give it parameters to return the needed output.</p>"},{"location":"05/ch_05/#process-management","title":"Process Management","text":"<p>Every command you run is a process. These commands help you see and manage them.</p> <p><code>ps</code> \u2013 Shows running processes (programs). Use <code>ps aux</code> to see all processes.</p> <p><code>kill</code> \u2013 Sends a signal to a process, usually to stop (terminate) it. You need the process ID (PID), which you can get from <code>ps</code></p> <p>A process can run in the forground or background</p> <p><code>jobs</code> \u2013 Lists your current jobs (programs started from this terminal). Useful when working with background tasks.</p> <p>A process can be suspended - it is in comma until we kill it or revive it.</p> <p><code>Ctrl+z</code> \u2013 Pause the current command and send it to the background in stopped state. You can resume it with <code>fg</code> or <code>bg</code>.</p> <p><code>bg</code> \u2013 Resumes a paused job (usually with Ctrl+Z) and runs it in the background.</p> <p><code>fg</code> \u2013 Brings a background job back to the foreground so you can interact with it.</p> <p><code>Ctrl+cC</code> \u2013 Cancel the current command. If a program is running and you want to stop it, press this.</p>"},{"location":"05/ch_05/#excercise-using-ps-and-jobs","title":"\ud83d\udcbb Excercise -- using ps and jobs","text":"<p>In this exercise, you will run a program, suspend it, send it the background and more.</p> <p>Create the program: <code>echo 'for ((i=1; ; i++)); do echo  \"$i\" ; sleep 1; done' &gt; loop</code></p> <p>make <code>loop</code> file executable: <code>chmod +x loop</code></p> <p>run it: <code>./loop</code></p> <p>Kill it by pressing <code>ctrl-c</code></p> <p>Run it again, this time suspend it.</p> <pre><code>$ ./loop\nhello\nhello\nhello\n^Z\n[1]+  Stopped                 ./loop\ncnoam@noam-u:~/tmp$\n</code></pre> <p>check who is suspended: <code>jobs</code></p> <p>Resume it to run in the background. Because the program writes to stdout, it will disturb the prompt (<code>$</code>)but you can give other commands in the shell since the program runs in the background!</p> <p>You cannot kill or suspend it again now using <code>ctrl-c</code> / <code>ctrl-z</code> since it is not connected to the shell.</p> <p>type <code>fg</code> (don`t forget ENTER) and the program will now be in the forground, using the shell's stdin.(so pressing keys will affect it)</p> <p>Kill it using <code>ctrl-c</code></p> <p>!!TODO!!</p> <p>\ud83c\udfa5 watch the video where I run this example</p>"},{"location":"05/ch_05/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"<p>Don't work too hard \u2014 nobody wants to type everything from scratch.</p> <p>\u2191 (Up arrow): Shows the previous command. You can press it multiple times to scroll through your command history. Once you find what you want, you can edit it or just press <code>ENTER</code> to run it again.</p> <p><code>TAB</code>: After typing the first few characters of a command or file name, press <code>TAB</code> to auto-complete it. If there's more than one match, pressing <code>TAB</code> again may show you the options.</p> <p><code>ctrl-r</code> : reverse search. type ctrl-r and start typing part of a previous command. The shell will search your history and show matches as you type. Press <code>Ctrl+r</code> again to cycle through other matches. Press <code>ENTER</code> to run the found command, or use arrow keys to edit it.</p> <p>There are many more tricks for using the shell, but let's start with these three.</p>"},{"location":"06/ch_06/","title":"Chapter 6: Text Processing &amp; Editing","text":""},{"location":"06/ch_06/#what-are-filter-programs-todo","title":"What are 'filter programs'? TODO","text":"<p>(take from Ahmad's) This should be in the pipeline chapter</p>"},{"location":"06/ch_06/#viewing-text-files","title":"Viewing Text Files","text":"<p>cat \u2014 Concatenate and print files</p> <p><code>cat /etc/os-release</code> Use: Print the contents of a file.</p> <p>less \u2014 View files page by page <code>less /var/log/syslog</code>  Use <code>q</code> to quit Use <code>/</code> to search inside the file</p> <p>head &amp; tail \u2014 View the start/end of a file  <code>head -n 10 /etc/passwd</code></p> <p><code>tail -n 10 /etc/passwd</code></p>"},{"location":"06/ch_06/#exercise-view-file-contents","title":"\ud83d\udcbb Exercise  -- view file contents","text":"<p>View the file <code>/etc/passwd</code> using <code>less</code></p> <p>search for the word <code>root</code></p> <p>Display the last 5 lines of the file using <code>tail</code></p>"},{"location":"06/ch_06/#searching-within-files","title":"Searching Within Files","text":"<p><code>grep</code> - Search using regular expressions  <code>grep root /etc/passwd</code> <code>egrep</code> - Same as grep -E (extended regex) <code>egrep '^(daemon|sys)' /etc/passwd</code> </p>"},{"location":"06/ch_06/#exercise-searching-within-files","title":"\ud83d\udcbb Exercise -- searching within files","text":"<ul> <li>Search for your current username in /etc/passwd:</li> </ul> <p><code>whoami</code> <code>grep $(whoami) /etc/passwd</code></p> <ul> <li>Find lines that start with <code>nobody</code> or <code>daemon</code> using egrep. To do this you need to use regex (regualr expression)</li> </ul> <p> To count characters/words/lines use <code>wc</code> (you guessed it: Word Count!)</p>"},{"location":"06/ch_06/#exercise-count-lines","title":"\ud83d\udcbb Exercise -- count lines","text":"<p>how many lines in /etc/passwd?</p> <p>answer: <code>wc -l /etc/passwd</code></p>"},{"location":"06/ch_06/#sorting-and-filtering","title":"Sorting and filtering","text":"<p>Use <code>sort</code> to do all kinds of sorting. You can choose by which keys. </p> <p>Use <code>uniq</code> to remove duplicate lines (if they are next to each other)</p>"},{"location":"06/ch_06/#cutting-some-columns","title":"cutting some columns","text":"<p>Just use <code>cut</code> to remove (or select) characters or fields based on their position. This command is especially handy to process strctured data such as CSV and log files)</p> <p>The command can extract characters or bytes or fields</p> <p>The examples will make it clear:</p> <pre><code>echo \"abcdefgh\" | cut -c 1-4    \u2192 `abcd`\necho \"abcdefgh\" | cut -c 2      \u2192 `b`\necho \"abcdefgh\" | cut -c 2-     \u2192 `bcdefgh`\n</code></pre> <p>Cut by field (a field is a string separated by some character such as space):</p> <p>we have this CSV file:</p> <pre><code>name,age,city\nJohn,25,London\n</code></pre> <p>and we want to get fields 1 and 3. </p> <p>Tell <code>cut</code> what is the delimiter (separator):</p> <pre><code>printf \"name,age,city\\nJohn,25,London\\n\" | cut -d, -f 1,3\n\u2192\nname,city\nJohn,London\n</code></pre>"},{"location":"06/ch_06/#exercise-how-many-unique-fruits","title":"\ud83d\udcbb Exercise --  how many unique fruits?","text":"<ul> <li>Create the input data file: <code>echo -e \"apple\\nbanana\\napple\\ncarrot\\napple\" &gt; fruits.txt</code></li> </ul> <p>how would you see the contents of the file? (<code>cat</code>)</p> <p>Now sort the file, remove duplicate lines, and count the lines. Was it so hard?</p> <p>answer: <code>sort fruits.txt | uniq | wc -l</code></p> <p>To understand how it works, run it in steps:</p> <pre><code>sort fruits.txt\nsort fruits.txt | uniq\nsort fruits.txt | uniq | wc -l\n</code></pre>"},{"location":"06/ch_06/#edit-with-a-real-editor","title":"Edit with a real editor","text":"<p>In almost all linux distros you will find the <code>vim</code> and <code>nano</code> editors. <code>vim</code> uses technology which was state of the art in 1982, and does not support moving cursor. Let's leave it alone.</p> <p><code>nano</code> is a full screen editor, with arrow keys to move the cursor but no mouse support. Instructions how to use it are at the bottom of the screen, so no need to remember them by heart.</p>"},{"location":"06/ch_06/#exercise-summary","title":"\ud83d\udcbb Exercise -- summary","text":"<p>Now that you have a few simple tools, combine them to get a real job done!</p> <p>Your server created a <code>web_access.log</code> file. You need to answer the following:</p> <ul> <li>how many times<code>index.html</code> was accessed?</li> <li>the list of IP that accessed the site (obviously each IP appears once)</li> <li>the IP that access the site the most</li> <li>get only the lines that used HTTP GET</li> </ul> <p>The file (more simple than a real log file) is here</p>"}]}